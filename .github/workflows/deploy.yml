name: Build and Deploy to GitHub Pages

# 触发条件
on:
  # 主分支推送和标签推送触发
  push:
    tags:
      - "v*"

  # 手动触发选项
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean

# 权限设置
permissions:
  contents: read
  pages: write
  id-token: write

# 确保只有一个部署任务同时运行
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 设置 pnpm 包管理器
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      # 配置 pnpm 环境变量
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      # 配置 pnpm 依赖缓存
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 安装 Rust 工具链
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown

      # 配置 Rust 依赖缓存
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # 缓存 WASM 工具
      - name: Cache WASM tools
        id: cache-wasm-tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            /usr/local/bin/wasm-opt
            ~/.wasm-pack
          key: ${{ runner.os }}-wasm-tools-v3
          restore-keys: |
            ${{ runner.os }}-wasm-tools-

      # 确保 cargo bin 在 PATH 中
      - name: Setup PATH
        run: |
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          mkdir -p ~/.cargo/bin

      # 安装 wasm-pack（如果缓存未命中）
      - name: Install wasm-pack
        if: steps.cache-wasm-tools.outputs.cache-hit != 'true'
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      # 安装 wasm-bindgen-cli（使用预编译版本）
      - name: Install wasm-bindgen-cli
        if: steps.cache-wasm-tools.outputs.cache-hit != 'true'
        run: |
          # 使用固定版本以确保兼容性
          WASM_BINDGEN_VERSION="0.2.95"
          echo "Installing wasm-bindgen-cli version: $WASM_BINDGEN_VERSION"
          
          # 下载预编译版本
          wget https://github.com/rustwasm/wasm-bindgen/releases/download/${WASM_BINDGEN_VERSION}/wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl.tar.gz
          tar -xzf wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl.tar.gz
          
          # 复制到 cargo bin 目录
          cp wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl/wasm-bindgen ~/.cargo/bin/
          cp wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl/wasm-bindgen-test-runner ~/.cargo/bin/
          
          # 设置执行权限
          chmod +x ~/.cargo/bin/wasm-bindgen
          chmod +x ~/.cargo/bin/wasm-bindgen-test-runner
          
          # 验证安装
          wasm-bindgen --version

      # 安装 wasm-opt 优化工具（如果缓存未命中）
      - name: Install wasm-opt
        if: steps.cache-wasm-tools.outputs.cache-hit != 'true'
        run: |
          # 使用固定版本以确保稳定性
          BINARYEN_VERSION="version_118"
          echo "Installing binaryen version: $BINARYEN_VERSION"
          
          wget https://github.com/WebAssembly/binaryen/releases/download/${BINARYEN_VERSION}/binaryen-${BINARYEN_VERSION}-x86_64-linux.tar.gz
          tar -xzf binaryen-${BINARYEN_VERSION}-x86_64-linux.tar.gz
          sudo cp binaryen-${BINARYEN_VERSION}/bin/wasm-opt /usr/local/bin/
          
          # 设置执行权限
          sudo chmod +x /usr/local/bin/wasm-opt
          
          # 验证安装
          wasm-opt --version

      # 验证工具安装
      - name: Verify WASM tools
        run: |
          echo "🔧 Verifying WASM tools installation:"
          echo "PATH: $PATH"
          echo "Checking wasm-pack..."
          wasm-pack --version
          echo "Checking wasm-bindgen..."
          wasm-bindgen --version
          echo "Checking wasm-opt..."
          wasm-opt --version

      # 安装项目依赖
      - name: Install dependencies
        run: |
          pnpm install --no-frozen-lockfile
          echo "✅ Dependencies installed successfully"

      # 显示构建配置
      - name: Show build configuration
        run: |
          echo "📋 GitHub Pages build configuration:"
          echo "Repository: ${{ github.repository }}"
          echo "Repository name: ${{ github.event.repository.name }}"
          echo "Expected base URL: /${{ github.event.repository.name }}/"

      # 构建项目 - 使用环境感知构建脚本
      - name: Build project for GitHub Pages
        env:
          NODE_ENV: production
          GITHUB_ACTIONS: true
          DEBUG_MODE: ${{ github.event.inputs.debug == 'true' }}
          # 确保环境变量正确设置给构建脚本
          VITE_BASE_URL: /${{ github.event.repository.name }}/
          VITE_ENV: github-pages
          VITE_APP_TITLE: Leptos + Vite Demo
        run: |
          echo "🔨 Starting GitHub Pages build process..."
          echo "Repository: ${{ github.repository }}"
          echo "Repository name: ${{ github.event.repository.name }}"
          echo "Debug mode: ${{ github.event.inputs.debug }}"
          echo "Using environment-aware build system..."
          
          # 显示构建环境信息
          echo "🌍 Build environment:"
          echo "  Node.js version: $(node --version)"
          echo "  pnpm version: $(pnpm --version)"
          echo "  Rust version: $(rustc --version)"
          echo "  wasm-pack version: $(wasm-pack --version)"
          
          # 显示环境变量配置
          echo "🔧 Environment configuration:"
          echo "  VITE_BASE_URL: $VITE_BASE_URL"
          echo "  VITE_ENV: $VITE_ENV"
          echo "  VITE_APP_TITLE: $VITE_APP_TITLE"
          echo "  GITHUB_ACTIONS: $GITHUB_ACTIONS"
          
          # 使用专门的 GitHub Pages 构建脚本
          pnpm run build:github
          
          echo "✅ GitHub Pages build completed successfully"

      # 验证构建产物
      - name: Verify build artifacts
        run: |
          echo "🔍 Checking build artifacts..."
          
          # 显示构建统计
          echo "📊 Build statistics:"
          echo "Dist directory size: $(du -sh dist | cut -f1)"
          echo "Number of files: $(find dist -type f | wc -l)"
          
          # 检查关键文件
          echo "🔍 Checking critical files:"
          ls -la dist/index.html
          
          echo "✅ Build verification completed"

      # 设置 GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # 自动启用 Pages 如果尚未启用
          enablement: true

      # 上传构建产物
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist"

      # 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # 输出部署结果
      - name: Output deployment URL
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "📱 Your app is now available at: ${{ steps.deployment.outputs.page_url }}"
          echo "🔗 Direct links to test:"
          echo "  - Home: ${{ steps.deployment.outputs.page_url }}"
          echo "  - Complex Props Demo: ${{ steps.deployment.outputs.page_url }}complex-props-demo"
          echo "  - MDUI Demo: ${{ steps.deployment.outputs.page_url }}md-demo"
          echo "  - MDUI JS API Demo: ${{ steps.deployment.outputs.page_url }}md-js-api-demo"
          echo ""
          echo "🧪 To test SPA routing, try accessing the direct links above."
          echo "They should work without 404 errors thanks to the SPA routing system."

      # 构建失败时的清理和调试信息
      - name: Debug build failure
        if: failure()
        run: |
          echo "❌ Build or deployment failed. Collecting debug information..."
          
          echo "📁 Workspace contents:"
          ls -la
          
          echo "📦 Package.json scripts:"
          cat package.json | grep -A 20 '"scripts"'
          
          echo "🔍 Environment files:"
          ls -la .env* || echo "No .env files found"
          
          echo "📂 Dist directory (if exists):"
          ls -la dist/ || echo "Dist directory not found"
          
          echo "🦀 Rust/WASM build artifacts:"
          ls -la pkg/ || echo "Pkg directory not found"
          
          echo "📋 Recent logs:"
          tail -50 /tmp/*.log || echo "No log files found"
