name: Create Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release for'
        required: true
        default: 'v0.1.0'
        type: string

permissions:
  contents: write
  actions: read
  id-token: write

concurrency:
  group: "release"
  cancel-in-progress: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.tag }}"
          else
            TAG_NAME="${{ github.ref_name }}"
          fi
          
          VERSION=${TAG_NAME#v}
          REPO_NAME="${{ github.event.repository.name }}"
          PACKAGE_NAME="${REPO_NAME}-${TAG_NAME}-wasm32-unknown-unknown.zip"
          
          if [[ "$VERSION" == *"-"* ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "full_repo=${{ github.repository }}" >> $GITHUB_OUTPUT
          
          echo "Building $TAG_NAME for $REPO_NAME"

      - name: Check existing release
        run: |
          if gh release view "${{ steps.version.outputs.tag_name }}" >/dev/null 2>&1; then
            echo "Release already exists, stopping"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      # ÈÖçÁΩÆ pnpm ÁéØÂ¢ÉÂèòÈáè
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      # ÈÖçÁΩÆ pnpm ‰æùËµñÁºìÂ≠ò
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # ÂÆâË£Ö Rust Â∑•ÂÖ∑Èìæ
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown

      # ÈÖçÁΩÆ Rust ‰æùËµñÁºìÂ≠ò
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # ÁºìÂ≠ò WASM Â∑•ÂÖ∑
      - name: Cache WASM tools
        id: cache-wasm-tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            /usr/local/bin/wasm-opt
            ~/.wasm-pack
          key: ${{ runner.os }}-wasm-tools-v3
          restore-keys: |
            ${{ runner.os }}-wasm-tools-

      # Á°Æ‰øù cargo bin Âú® PATH ‰∏≠
      - name: Setup PATH
        run: |
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          mkdir -p ~/.cargo/bin

      # ÂÆâË£Ö wasm-packÔºàÂ¶ÇÊûúÁºìÂ≠òÊú™ÂëΩ‰∏≠Ôºâ
      - name: Install wasm-pack
        if: steps.cache-wasm-tools.outputs.cache-hit != 'true'
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      # ÂÆâË£Ö wasm-bindgen-cliÔºà‰ΩøÁî®È¢ÑÁºñËØëÁâàÊú¨Ôºâ
      - name: Install wasm-bindgen-cli
        if: steps.cache-wasm-tools.outputs.cache-hit != 'true'
        run: |
          WASM_BINDGEN_VERSION="0.2.95"
          wget https://github.com/rustwasm/wasm-bindgen/releases/download/${WASM_BINDGEN_VERSION}/wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl.tar.gz
          tar -xzf wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl.tar.gz
          cp wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl/wasm-bindgen ~/.cargo/bin/
          cp wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl/wasm-bindgen-test-runner ~/.cargo/bin/
          chmod +x ~/.cargo/bin/wasm-bindgen
          chmod +x ~/.cargo/bin/wasm-bindgen-test-runner

      # ÂÆâË£Ö wasm-opt ‰ºòÂåñÂ∑•ÂÖ∑ÔºàÂ¶ÇÊûúÁºìÂ≠òÊú™ÂëΩ‰∏≠Ôºâ
      - name: Install wasm-opt
        if: steps.cache-wasm-tools.outputs.cache-hit != 'true'
        run: |
          BINARYEN_VERSION="version_118"
          wget https://github.com/WebAssembly/binaryen/releases/download/${BINARYEN_VERSION}/binaryen-${BINARYEN_VERSION}-x86_64-linux.tar.gz
          tar -xzf binaryen-${BINARYEN_VERSION}-x86_64-linux.tar.gz
          sudo cp binaryen-${BINARYEN_VERSION}/bin/wasm-opt /usr/local/bin/
          sudo chmod +x /usr/local/bin/wasm-opt

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        env:
          NODE_ENV: production
          VITE_ENV: production
        run: |
          echo "Building production release..."
          pnpm run build
          
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "Build failed"
            exit 1
          fi
          
          echo "Build completed successfully"

      - name: Create release package
        run: |
          mkdir -p release-temp
          cp -r dist/* release-temp/
          
          cat > release-temp/README.md << EOF
          # ${{ steps.version.outputs.repo_name }} - ${{ steps.version.outputs.tag_name }}
          
          Production build for wasm32-unknown-unknown platform.
          
          ## Usage
          1. Extract the zip file
          2. Serve files with a web server
          3. Open index.html in browser
          EOF
          
          cd release-temp
          zip -r "../${{ steps.version.outputs.package_name }}" .
          cd ..
          
          # È™åËØÅ ZIP Êñá‰ª∂ÂÆåÊï¥ÊÄß
          if [ ! -f "${{ steps.version.outputs.package_name }}" ]; then
            echo "Package creation failed"
            exit 1
          fi
          
          if ! unzip -t "${{ steps.version.outputs.package_name }}" >/dev/null 2>&1; then
            echo "Package is corrupted"
            exit 1
          fi
          
          echo "Package created: ${{ steps.version.outputs.package_name }}"

      - name: Generate checksums
        run: |
          PACKAGE_NAME="${{ steps.version.outputs.package_name }}"
          
          # ÁîüÊàê SHA256 Ê†°È™åÂíå (Ê†áÂáÜÊ†ºÂºè: hash + ‰∏§‰∏™Á©∫Ê†º + Êñá‰ª∂Âêç)
          sha256sum "$PACKAGE_NAME" > "${PACKAGE_NAME}.sha256"
          
          # ÁîüÊàê SHA1 Ê†°È™åÂíå (Ê†áÂáÜÊ†ºÂºè: hash + ‰∏§‰∏™Á©∫Ê†º + Êñá‰ª∂Âêç)
          sha1sum "$PACKAGE_NAME" > "${PACKAGE_NAME}.sha1"
          
          echo "Generated checksums:"
          echo "SHA256:"
          cat "${PACKAGE_NAME}.sha256"
          echo "SHA1:"
          cat "${PACKAGE_NAME}.sha1"
          
          # È™åËØÅÊ†°È™åÂíåÊñá‰ª∂Ê†ºÂºè
          echo "Verifying checksum files..."
          sha256sum -c "${PACKAGE_NAME}.sha256"
          sha1sum -c "${PACKAGE_NAME}.sha1"
          
          echo "Checksums verified successfully"

      - name: Generate changelog
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          REPO_NAME="${{ steps.version.outputs.repo_name }}"
          FULL_REPO="${{ steps.version.outputs.full_repo }}"
          IS_PRERELEASE="${{ steps.version.outputs.is_prerelease }}"
          PACKAGE_NAME="${{ steps.version.outputs.package_name }}"
          
          # Ëé∑Âèñ‰∏ä‰∏Ä‰∏™Ê†áÁ≠æ
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^$TAG_NAME$" | head -n 1)
          
          # ÂàõÂª∫ changelog Êñá‰ª∂
          {
            echo "# Release $TAG_NAME"
            echo ""
            
            if [ "$IS_PRERELEASE" = "true" ]; then
              echo "> ‚ö†Ô∏è **This is a pre-release version**. It may contain experimental features or bugs."
              echo ""
            fi
            
            if [ -z "$PREVIOUS_TAG" ]; then
              # È¶ñÊ¨°ÂèëÂ∏É
              echo "## üéâ Initial Release"
              echo ""
              echo "### What's Included"
              echo "- Complete $REPO_NAME application"
              echo "- WebAssembly (WASM) optimized build"
              echo "- Production-ready distribution"
              echo "- Cross-platform compatibility"
              echo ""
              
              TOTAL_COMMITS=$(git rev-list --count HEAD)
              echo "### üìä Project Statistics"
              echo "- Total commits: $TOTAL_COMMITS"
              echo "- Build platform: wasm32-unknown-unknown"
              echo "- Package format: ZIP with checksums"
              echo ""
            else
              # ÁâàÊú¨Êõ¥Êñ∞
              echo "## What's Changed"
              echo ""
              
              # Ëé∑ÂèñÊèê‰∫§‰ø°ÊÅØ
              COMMITS=$(git log --pretty=format:"%h|%s|%an" "$PREVIOUS_TAG..$TAG_NAME")
              
              if [ -z "$COMMITS" ]; then
                echo "- No significant changes"
                echo ""
              else
                # ÂàÜÁ±ªÂèòÊõ¥
                echo "$COMMITS" | while IFS='|' read -r hash subject author; do
                  [ -z "$hash" ] && continue
                  echo "- $subject ([${hash}](https://github.com/${FULL_REPO}/commit/${hash})) by @$author"
                done
                echo ""
                
                COMMIT_COUNT=$(echo "$COMMITS" | wc -l)
                echo "### üìä Release Statistics"
                echo "- Commits in this release: $COMMIT_COUNT"
                echo "- Previous version: $PREVIOUS_TAG"
                echo "- Release type: $([ "$IS_PRERELEASE" = "true" ] && echo "Pre-release" || echo "Stable")"
                echo ""
              fi
            fi
            
            # Ê∑ªÂä†‰∏ãËΩΩÂíåÂÆâË£ÖËØ¥Êòé
            echo "## üì• Download & Installation"
            echo ""
            echo "### Files in this release:"
            echo "- \`$PACKAGE_NAME\` - Main application package"
            echo "- \`${PACKAGE_NAME}.sha256\` - SHA256 checksum"
            echo "- \`${PACKAGE_NAME}.sha1\` - SHA1 checksum"
            echo ""
            echo "### Installation steps:"
            echo "1. Download \`$PACKAGE_NAME\`"
            echo "2. Verify integrity: \`sha256sum -c ${PACKAGE_NAME}.sha256\`"
            echo "3. Extract the ZIP file"
            echo "4. Serve files with a web server"
            echo "5. Open \`index.html\` in your browser"
            echo ""
            echo "### System Requirements:"
            echo "- Modern web browser with WebAssembly support"
            echo "- Web server (for CORS compliance)"
            echo "- No additional dependencies required"
            echo ""
            
            # Ê∑ªÂä†ÈìæÊé•
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "---"
              echo ""
              echo "**Full Changelog**: https://github.com/${FULL_REPO}/compare/${PREVIOUS_TAG}...${TAG_NAME}"
              echo "**All Releases**: https://github.com/${FULL_REPO}/releases"
            fi
          } > CHANGELOG.md
          
          echo "Generated changelog for $TAG_NAME"
          echo "Changelog length: $(wc -l < CHANGELOG.md) lines"

      - name: Create GitHub Release
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          PACKAGE_NAME="${{ steps.version.outputs.package_name }}"
          
          ARGS="--title \"$TAG_NAME\" --notes-file CHANGELOG.md"
          if [ "${{ steps.version.outputs.is_prerelease }}" = "true" ]; then
            ARGS="$ARGS --prerelease"
          fi
          
          eval "gh release create \"$TAG_NAME\" $ARGS"
          gh release upload "$TAG_NAME" "$PACKAGE_NAME" "${PACKAGE_NAME}.sha256" "${PACKAGE_NAME}.sha1"
          
          echo "Release created: https://github.com/${{ steps.version.outputs.full_repo }}/releases/tag/$TAG_NAME"
          echo ""
          echo "Files uploaded:"
          echo "- $PACKAGE_NAME"
          echo "- ${PACKAGE_NAME}.sha256"
          echo "- ${PACKAGE_NAME}.sha1"
          echo ""
          echo "To verify download integrity:"
          echo "  sha256sum -c ${PACKAGE_NAME}.sha256"
          echo "  sha1sum -c ${PACKAGE_NAME}.sha1"
        env:
          GH_TOKEN: ${{ github.token }}